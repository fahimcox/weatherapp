{"version":3,"sources":["TempCard.js","Temp.js","App.js","reportWebVitals.js","index.js"],"names":["TempCard","tempInfo","useState","weatherState","setWeatherState","temp","humidity","pressure","weathermode","name","country","sunset","speed","useEffect","date","Date","timeStr","getHours","getMinutes","className","id","toLocaleDateString","toLocaleTimeString","Temp","inputInfo","setinputInfo","setTempInfo","getWeatherInfo","a","url","fetch","res","json","data","main","weather","sys","sunrise","wind","console","log","type","placeholder","autoFocus","onChange","e","target","value","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNA+DeA,MA7Df,YAA+B,IAAZC,EAAW,EAAXA,SAEf,EAAqCC,mBAAS,KAA9C,mBAAOC,EAAP,KAAoBC,EAApB,KAGIC,EAQFJ,EAREI,KACAC,EAOFL,EAPEK,SACAC,EAMFN,EANEM,SACAC,EAKFP,EALEO,YACAC,EAIFR,EAJEQ,KACAC,EAGFT,EAHES,QACAC,EAEFV,EAFEU,OACAC,EACFX,EADEW,MAGJC,qBAAU,WACP,GAAGL,EACC,OAAQA,GACJ,IAAK,SAAUJ,EAAgB,iBAC3B,MACA,IAAK,OAAQA,EAAgB,UAC7B,MACA,IAAK,OAAQA,EAAgB,WAC7B,MAGJ,QACCA,EAAgB,mBAIzB,CAACI,IAEJ,IACIM,EAAM,IAAIC,KAAS,IADfJ,GAEJK,EAAQ,GAAD,OAAKF,EAAKG,WAAV,YAAwBH,EAAKI,cACxC,OACI,mCACI,qBAAKC,UAAU,WAAf,SACG,sBAAKA,UAAU,UAAf,UACG,qBAAKA,UAAU,uBAAf,SACG,mBAAGA,UAAS,aAAQhB,GAAgBiB,GAAG,kBAExC,sBAAKD,UAAU,cAAf,UACO,sBAAKA,UAAU,iBAAf,UACK,qBAAIA,UAAU,iBAAd,UAAgCd,EAAhC,WAAgD,sBAAKc,UAAU,iBAAf,UAAgC,6BAAKX,IAAiB,+BAAKC,EAAL,KAAaC,WAE3H,sBAAKS,UAAU,iBAAf,UAAgC,+BAAM,IAAIJ,MAAOM,uBAA2B,+BAAM,IAAIN,MAAOO,6BAEjG,sBAAKH,UAAU,gBAAf,UACQ,sBAAKA,UAAU,aAAf,UAA4B,mBAAGA,UAAU,4BAA8B,gCAAK,8BAAMH,IAAc,+CAChG,sBAAKG,UAAU,aAAf,UAA4B,mBAAGA,UAAU,8BAAgC,gCAAK,8BAAMb,IAAe,iDACnG,sBAAKa,UAAU,aAAf,UAA4B,mBAAGA,UAAU,0BAA4B,gCAAK,8BAAMZ,IAAe,iDAC/F,sBAAKY,UAAU,aAAf,UAA4B,mBAAGA,UAAU,iCAAmC,gCAAK,8BAAMP,IAAY,yDCOhHW,MA3Df,WACI,MAA+BrB,mBAAS,SAAxC,mBAAOsB,EAAP,KAAiBC,EAAjB,KACA,EAA6BvB,mBAAS,IAAtC,mBAAOD,EAAP,KAAgByB,EAAhB,KACMC,EAAc,uCAAE,sDAAAC,EAAA,sEAEVC,EAFU,4DAE+CL,EAF/C,iEAIGM,MAAMD,GAJT,cAIRE,EAJQ,gBAKIA,EAAIC,OALR,OAKRC,EALQ,SAOgBA,EAAKC,KAA7B7B,EAPQ,EAORA,KAAKC,EAPG,EAOHA,SAASC,EAPN,EAOMA,SACTC,EAAayB,EAAKE,QAAQ,GAA/BD,KACAzB,EAAMwB,EAANxB,KATQ,EAUgBwB,EAAKG,IAA7B1B,EAVQ,EAURA,QAAQ2B,EAVA,EAUAA,QAAQ1B,EAVR,EAUQA,OAChBC,EAAOqB,EAAKK,KAAZ1B,MAcPc,EAXuB,CACtBrB,OACAC,WACAC,WACAC,cACAC,OACAC,UACA2B,UACA1B,SACAC,UAvBc,kDA2Bd2B,QAAQC,IAAR,MA3Bc,0DAAF,qDAkCpB,OAHA3B,qBAAU,WACTc,MACC,IAEE,qCACI,qBAAKR,UAAU,OAAf,SACI,sBAAKA,UAAU,SAAf,UACI,uBAAOsB,KAAK,OACZC,YAAY,SACZC,WAAS,EACTvB,GAAG,SACHD,UAAU,aAEVyB,SAAU,SAACC,GAAD,OAAKpB,EAAaoB,EAAEC,OAAOC,UAErC,wBAAQ5B,UAAU,eAAesB,KAAK,SAASO,QAASrB,EAAxD,yBAKR,cAAC,EAAD,CAAU1B,SAAUA,QC/CjBgD,MARf,WACE,OACE,mCACE,cAAC,EAAD,OCOSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.37aa2245.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nfunction TempCard({tempInfo}) {\r\n\r\n    const [weatherState,setWeatherState]=useState(\" \");\r\n\r\n    const {\r\n        temp,\r\n        humidity,\r\n        pressure,\r\n        weathermode,\r\n        name,\r\n        country,\r\n        sunset,\r\n        speed,\r\n    }=tempInfo;\r\n\r\n    useEffect(() => {\r\n       if(weathermode){\r\n           switch (weathermode) {\r\n               case \"Clouds\": setWeatherState(\"wi-day-cloudy\");\r\n                   break;\r\n                   case \"Haze\": setWeatherState(\"wi-fog\");\r\n                   break;\r\n                   case \"Rain\": setWeatherState(\"wi-rain\");\r\n                   break;\r\n                   case \"Sunny\": setWeatherState(\"wi-day-sunny\");\r\n                   break;\r\n               default:\r\n                setWeatherState(\"wi-day-sunny\");\r\n                   break;\r\n           }\r\n       }\r\n    }, [weathermode])\r\n\r\n    let sec=sunset;\r\n    let date= new Date(sec*1000)\r\n    let timeStr= `${date.getHours()}:${date.getMinutes()}`;\r\n    return (\r\n        <>\r\n            <div className=\"widthget\">\r\n               <div className=\"weather\">\r\n                  <div className=\"weatherConditionIcon\">\r\n                     <i className={`wi ${weatherState}`} id=\"weatherIcon\"></i>\r\n                  </div>\r\n                    <div className=\"weatherInfo\">\r\n                           <div className=\"weatherInfoOne\">\r\n                                <h1 className=\"countryInfoOne\">{temp} &deg;</h1><div className=\"countryInfoTwo\"><h1>{weathermode}</h1><h6>{name}, {country}</h6></div>\r\n                           </div>\r\n                        <div className=\"weatherInfoTwo\"><div>{new Date().toLocaleDateString()}</div><div>{new Date().toLocaleTimeString()}</div></div>\r\n                    </div>\r\n                    <div className=\"footerSection\">\r\n                            <div className=\"footerInfo\"><i className=\"wi wi-sunset footerIcon\"></i><div><div>{timeStr}</div><div>Sunset</div></div></div>\r\n                            <div className=\"footerInfo\"><i className=\"wi wi-humidity footerIcon\"></i><div><div>{humidity}</div><div>Humidity</div></div></div>\r\n                            <div className=\"footerInfo\"><i className=\"wi wi-rain footerIcon\"></i><div><div>{pressure}</div><div>Pressure</div></div></div>\r\n                            <div className=\"footerInfo\"><i className=\"wi wi-strong-wind footerIcon\"></i><div><div>{speed}</div><div>Speed</div></div></div>\r\n                    </div>\r\n               </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TempCard\r\n","import React, { useState,useEffect } from 'react'\r\nimport TempCard from './TempCard';\r\n\r\nfunction Temp() {\r\n    const [inputInfo,setinputInfo]=useState(\"Dhaka\");\r\n    const [tempInfo,setTempInfo]=useState({})\r\n    const getWeatherInfo= async ()=>{\r\n        try {\r\n            let url=`https://api.openweathermap.org/data/2.5/weather?q=${inputInfo}&units=metric&appid=28d9cef5683b6ea6f522e0ce79575aa7`;\r\n\r\n            const res= await fetch(url);\r\n            const data= await res.json();\r\n\r\n           const {temp,humidity,pressure}=data.main;\r\n           const {main:weathermode}=data.weather[0];\r\n           const {name}=data;\r\n           const {country,sunrise,sunset}=data.sys;\r\n           const {speed}=data.wind;\r\n            \r\n\r\n           const myNewWeatherInfo={\r\n            temp,\r\n            humidity,\r\n            pressure,\r\n            weathermode,\r\n            name,\r\n            country,\r\n            sunrise,\r\n            sunset,\r\n            speed,\r\n           };\r\n           setTempInfo(myNewWeatherInfo)\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n     getWeatherInfo()\r\n    },[])\r\n    return (\r\n        <>\r\n            <div className=\"warp\">\r\n                <div className=\"search\">\r\n                    <input type=\"text\"\r\n                    placeholder=\"search\" \r\n                    autoFocus\r\n                    id=\"search\"\r\n                    className=\"searchTerm\"\r\n                    // value={inputInfo}\r\n                    onChange={(e)=>setinputInfo(e.target.value)}\r\n                    />\r\n                    <button className=\"searchButton\" type=\"button\" onClick={getWeatherInfo}>\r\n                        Search\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <TempCard tempInfo={tempInfo}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Temp\r\n","import Temp from './Temp';\n\nfunction App() {\n  return (\n    <>\n      <Temp/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}